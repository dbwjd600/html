/* 9.transform.css */

*{ padding: 0; margin: 0; box-sizing: border-box; }
/* 불필요한 명령줄 필요없기 때문에 태그선정해서 명령줌 (전체선택자 아닌,)*/

article{
    width: 100%; height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
}
h2{
    margin-bottom: 40px;
}

/* scale */
.scale {
    width: 400px;
    overflow: hidden;
}
.scale > img{
    width: 100%; height: 100%;
    transition: 0.5s;
}
.scale:hover > img{
    transform: scale(1.2);
}

/* rotate */
.rotate{
    width: 400px;
    background-color: #ddd;
}
.rotate > img{
    width: 100%;
    transition: 0.5s;
    transform-origin: left bottom;
    /* transform-origin: 0% 100% (왼쪽상단꼭지점기준 X/Y) */
}
.rotate:hover > img{
    transform: rotate(45deg);
}

/* rotate2 */
.rotate2{
    width: 400px;
    background-color: #ddd;
}
.rotate2 > img{
    width: 100%;
    transition: 1s;
}
.rotate2:hover > img{
    transform: perspective(600px) rotateY(-45deg);
}
/*  rotateXㅣY : 꼭지점아닌, 축을 중심으로
    perspective(600px) : 기본이600px, 숫자가 작을수록 커짐 */

/* rotate3 */
.rotate3{
    width: 400px;
    background-color: #ddd;
}
.rotate3 > img{
    width: 100%;
    transition: 1s;
    transform-origin: bottom;
}
.rotate3:hover > img{
    transform: perspective(600px) rotateX(40deg);
}

/* translate */
.translate{
    width: 400px;
}
.translate > img{
    width: 100%;
    transition: 0.5s;
}
.translate:hover > img{
    box-shadow: 20px 20px 20px rgba( 0,0,0,0.4);
            /*    x   y   blur  color   */
    transform:translate(-5%,-5%);
}

/* skew */
.skew{
    border:1px solid #000;
    transform: perspective(600px) rotateX(40deg);
    position: relative;
}
.skew > p{
    background-color: #ff0;
    padding: 50px;
}
.skew:hover{
    transform: perspective(600px) rotateX(0deg);
}
.skew::after{
    content:'';
    width: 100%; height: 50%;
    background-color: rgba(0,0,0,0.4);
    position: absolute; left: 0; bottom: 0;
    /* transform: perspective(600px) rotateX(45deg); -> 넣는거아님 */
    z-index:-1;
    transform-origin: left bottom;
    transition: 0.5s;
}
.skew:hover::after{
    transform: skew(-40deg);
}

/* 예제 */
.ex {
    width: 500px;
    border: 1px solid #000;
    display: flex;
    justify-content: center;
    text-align: center;
    overflow: hidden;
}
.ex > p{
    width: 50%;
    padding: 200px 0;
    background-color: #ddd;
    transition: 1s;
}
.ex:hover > p:nth-child(1){
    transform: translate(-100%)
}
.ex:hover > p:nth-child(2){
    transform: translate(100%)
}
/* flex-shrink : 자식이 부모를 넘어서면 떨어지거나 너비감소될때,
방지하기위해 사용 (자식이 부모의 크기를 넘어설때) */

.ex2{
    width: 50px;
}
.ex2 > span{
    margin: 10px;
    border-bottom: 2px solid #000;
    display: flex;
    flex-direction: column;
}
.ex2:hover > span:nth-child(1){
    transform: rotate(45deg) translateY(10px);
}
/* translate자기 자신의 크기를 100%가짐 (부모에 맞춰) */
.ex2:hover > span:nth-child(2){
    display: none;
}
.ex2:hover > span:nth-child(3){
    transform: rotate(-45deg) translateY(-10px);
}
/* 위치와 각도가 변경되기 때문에 flex보다는 position이 수월 */

/* ------ex2-2차시도------- */
.ex2-2{
    width: 50px; height: 20px;
    position: relative;
}
.ex2-2 > span{
    border-top: 3px solid #000;
    width: 100%;
    position: absolute;
    left: 0;
}
/* 공중에 뜨면 부모가 자식크기를 인지 못하기 때문에,
-> 부모에게 width와 heigth 넣어줌. 크기값 안주면 :hover 안먹음. */

.ex2-2 > span:nth-child(1){
    top: 0;
}
.ex2-2 > span:nth-child(2){
    top:50%; 
    transform: translateY(-50%); /* translate자기 자신의 크기를 100%가짐 (부모에 맞춰) */
}
.ex2-2 > span:nth-child(3){
    bottom: 0;
}

.ex2-2:hover > span:nth-child(1){
    top:50%;
    transform: translateY(-50%) rotate(45deg);
}
.ex2-2:hover > span:nth-child(2){
    transform: translateX(100%);
    opacity: 0;
    transition: 0.2s;
}
.ex2-2:hover > span:nth-child(3){
    bottom:50%;
    transform: translateY(50%) rotate(-45deg);
}